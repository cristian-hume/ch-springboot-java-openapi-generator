openapi: 3.0.0
info:
  title: 'API Customers'
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api/v1'
  - url: 'http://localhost:9090/api/v1'
tags:
  - name: 'Customer'
    description: 'Operations about customer'
    externalDocs:
      description: 'Find out more about our customer'
      url: 'http://swagger.io'
paths:
  /customer:
    post:
      tags:
        - 'Customer'
      summary: 'Create customer'
      description: 'Create customer'
      operationId: 'createUser'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
        required: true
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: 'Bad Gateway'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: 'Service Unavailable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /customer/{customer_id}:
    get:
      tags:
        - 'Customer'
      summary: 'Find customer'
      description: 'Generates a greeting message.'
      operationId: 'get_user'
      parameters:
        - name: customer_id
          in: path
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
          description: 'The name that needs to be deleted'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindCustomerResponse'
    put:
      tags:
        - 'Customer'
      summary: 'Update customer'
      description: 'Generates a greeting message.'
      operationId: 'put_user'
      parameters:
        - name: customer_id
          in: path
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
          description: 'The name that needs to be deleted'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
        required: true
      responses:
        '200':
          description: 'Ok'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: 'Bad Gateway'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: 'Service Unavailable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - 'Customer'
      summary: 'Delete customer'
      description: 'Delete customer'
      operationId: 'deleteCustomer'
      parameters:
        - name: customer_id
          in: path
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
          description: 'The name that needs to be deleted'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Ok'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: 'Bad Gateway'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: 'Service Unavailable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    CreateCustomerRequest:
      type: object
      properties:
        rut:
          type: string
          example: '11222333-4'
        first_name:
          type: string
          example: 'Cristian'
        last_name:
          type: string
          example: 'Hume Henriquez'
        email:
          type: string
          example: 'cristian.hume@programmer.net'
        phone:
          type: string
          example: '+56 9 8877 6655'
        status:
          type: integer
          description: 'User Status'
          format: int32
    CreateCustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
    FindCustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        rut:
          type: string
          example: '11222333-4'
        first_name:
          type: string
          example: 'Cristian'
        last_name:
          type: string
          example: 'Hume Henriquez'
        email:
          type: string
          example: 'cristian.hume@programmer.net'
        phone:
          type: string
          example: '+56 9 8877 6655'
        status:
          type: integer
          description: 'User Status'
          format: int32
    UpdateCustomerRequest:
      type: object
      properties:
        rut:
          type: string
          example: '11222333-4'
        first_name:
          type: string
          example: 'Cristian'
        last_mame:
          type: string
          example: 'Hume Henriquez'
        email:
          type: string
          example: 'cristian.hume@programmer.net'
        phone:
          type: string
          example: '+56 9 8877 6655'
        status:
          type: integer
          description: 'User Status'
          format: int32
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          example: '2022-02-23T22:04:01.316'
        status:
          type: number
          example: 500
        error:
          type: string
          example: 'Internal Server Error'
        exception:
          type: string
          example: 'java.lang.ArithmeticException'
        message:
          type: string
          example: '/ by zero'
        trace:
          type: string
          example: 'java.lang.ArithmeticException: / by zero cl.scotiabank.app.Application.java:36'
        path:
          type: string
          example: '/api/v1'

